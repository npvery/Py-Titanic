import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt

train = pd.read_csv("C:/Users/nicholasve/Downloads/train.csv")
test = pd.read_csv("C:/Users/nicholasve/Downloads/test.csv")

train.sample(3)

###Visualize data using seaborn package

#Plotting using the seaborn package. The "hue" field here will further split the data by the third variable.
sns.barplot(x = "Embarked", y = "Survived", hue = "Sex", data = train)

#Continued plotting with seaborn. Commands seem reasonable enough, I like seaborn. 
#Many different linestyles to use; check documentation for more.
sns.pointplot(x = "Pclass", y = "Survived", hue = "Sex", data = train, palette = {"male":"green", "female":"red"}, markers = ["*", "o"], linestyles = ["-", "--"])


###Transforming features
#Pretty new for me, so this will be interesting. Make age groups, maybe fare groups? Fare groups would just closely resemble Pclass.
#Write as functions, then call functions as needed. This is just best practice.

#Deal with missing age values and make age groups
def simplify_ages(data):
  data.Age = data.Age.fillna(-0.5)
  bins = (-1, 0, 18, 35, 60, 120)
  names = ["Unknown", "Child", "Young Adult", "Adult", "Elderly"]
  age_groups = data.cut(train.Age, bins, labels = names, retbins = True)
  return data
 
#Many entries don't have a value for cabin, but for those that do, cabin might provide a lot of predictive power. 
def simplify_cabin(data):
  data.Cabin = data.Cabin.fillna("N")
  #Splits off the first cabin letter from the number, as it's probably more important.
  data.Cabin = data.Cabin.apply(lambda x: x[0])
  return data

#Since Fare is a continuous variable, bin it to make it categorical.
#Use describe() to find quartiles, then bin using those.
train.describe()
def simplify_fares(data):
  data.fare = data.fare.fillna(-0.5)
  bins = (-1, 0, FILL WITH QUARTILES)
  names = ["Unknown", "first-quartile", "second-quartile", "third-quartile", "fourth-quartile"]
  data.fare = pd.cut(data.fare, bins, labels = names)
  return data
  
def simplify_names(data):
  data["Last-Name"] = data.Name.apply(lambda x: x.split(",")[0])
  data["Prefix"] = data.Name.apply(lambda x: x.split(" ")[1])
  return(data)
  
def drop_useless(data):
  return data.drop(["Ticket", "Name"], axis = 1)
  
def transform(data):
  simplify_ages(data)
  simplify_cabin(data)
  simplify_fares(data)
  simplify_names(data)
  drop_useless(data)
  return data

train = transform(train)
test = transform(test)
train.head(5)
test.head(5)







